==8091== Memcheck, a memory error detector
==8091== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==8091== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==8091== Command: ./frigate
==8091== Parent PID: 2023
==8091== 
==8091== Conditional jump or move depends on uninitialised value(s)
==8091==    at 0x4C2DB3C: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==8091==    by 0x400C69: main (in /home/melissa/bitbucket/2018_spring_ecpe170/lab04/frigate)
==8091== 
==8091== Conditional jump or move depends on uninitialised value(s)
==8091==    at 0x4C2DB3C: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==8091==    by 0x400C84: main (in /home/melissa/bitbucket/2018_spring_ecpe170/lab04/frigate)
==8091== 
==8091== Invalid write of size 8
==8091==    at 0x400D97: main (in /home/melissa/bitbucket/2018_spring_ecpe170/lab04/frigate)
==8091==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==8091== 
==8091== 
==8091== Process terminating with default action of signal 11 (SIGSEGV)
==8091==  Access not within mapped region at address 0x0
==8091==    at 0x400D97: main (in /home/melissa/bitbucket/2018_spring_ecpe170/lab04/frigate)
==8091==  If you believe this happened as a result of a stack
==8091==  overflow in your program's main thread (unlikely but
==8091==  possible), you can try to increase the size of the
==8091==  main thread stack using the --main-stacksize= flag.
==8091==  The main thread stack size used in this run was 8388608.
==8091== 
==8091== HEAP SUMMARY:
==8091==     in use at exit: 8 bytes in 1 blocks
==8091==   total heap usage: 3 allocs, 2 frees, 2,056 bytes allocated
==8091== 
==8091== 8 bytes in 1 blocks are definitely lost in loss record 1 of 1
==8091==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==8091==    by 0x400D96: main (in /home/melissa/bitbucket/2018_spring_ecpe170/lab04/frigate)
==8091== 
==8091== LEAK SUMMARY:
==8091==    definitely lost: 8 bytes in 1 blocks
==8091==    indirectly lost: 0 bytes in 0 blocks
==8091==      possibly lost: 0 bytes in 0 blocks
==8091==    still reachable: 0 bytes in 0 blocks
==8091==         suppressed: 0 bytes in 0 blocks
==8091== 
==8091== For counts of detected and suppressed errors, rerun with: -v
==8091== Use --track-origins=yes to see where uninitialised values come from
==8091== ERROR SUMMARY: 4 errors from 4 contexts (suppressed: 0 from 0)
